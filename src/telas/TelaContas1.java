/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package telas;

import classesGerenciador.Carteira;
import classesGerenciador.ContasUsuarios;
import classesGerenciador.OrigemRenda;
import classesGerenciador.Usuario;
import java.text.ParseException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import projeto.gerenciador.financeiro.ControleTelas;



/**
 *
 * @author Bruno Eduardo <https://github.com/brnduol>
 */
public class TelaContas1 extends javax.swing.JFrame {
    private ContasUsuarios contaUsuarios;
    private Usuario contaAtual;
    private ControleTelas controleTelas;

    /**
     * Creates new form TelaContas1
     */
    public TelaContas1() {
        contaUsuarios = ContasUsuarios.getInstance();
        contaAtual = contaUsuarios.conta();
        controleTelas = ControleTelas.getInstance();
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSeparator4 = new javax.swing.JSeparator();
        lblConta = new javax.swing.JLabel();
        lblSaldo = new javax.swing.JLabel();
        txtConta = new javax.swing.JTextField();
        txtSaldo = new javax.swing.JTextField();
        bntCriar = new javax.swing.JButton();
        bntExcluir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        bntEditar = new javax.swing.JButton();
        txtData = new javax.swing.JTextField();
        lblData = new javax.swing.JLabel();
        bntSalvar = new javax.swing.JButton();
        bntPesquisar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        lblTipo = new javax.swing.JLabel();
        cmbTipo = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jmPrincipal = new javax.swing.JMenuItem();
        jmHistorico = new javax.swing.JMenuItem();
        jmGraficos = new javax.swing.JMenuItem();
        jmCategorias = new javax.swing.JMenuItem();
        jmSair = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblConta.setText("Conta");

        lblSaldo.setText("Saldo");

        txtConta.setToolTipText("Insira o tipo de Conta a ser cadastrada, por exemplo, \"Inter\"");

        txtSaldo.setToolTipText("Insira o saldo no formato inteiro");

        bntCriar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/hand_cursor-48_44849.png"))); // NOI18N
        bntCriar.setText("Criar");
        bntCriar.setToolTipText("Crie uma conta");
        bntCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntCriarActionPerformed(evt);
            }
        });

        bntExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/trash-48_45241.png"))); // NOI18N
        bntExcluir.setText("Excluir");
        bntExcluir.setToolTipText("Exclua uma conta");
        bntExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExcluirActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Conta", "Saldo", "Data", "Tipo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        bntEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/account_edit_outline_icon_140057 (1).png"))); // NOI18N
        bntEditar.setText("Editar");
        bntEditar.setToolTipText("Edite os dados da conta");
        bntEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntEditarActionPerformed(evt);
            }
        });

        txtData.setToolTipText("Insira a data no formato dd/mm/yyyy");
        txtData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataActionPerformed(evt);
            }
        });

        lblData.setText("Data");

        bntSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/object_select_icon_180887.png"))); // NOI18N
        bntSalvar.setText("Salvar");
        bntSalvar.setToolTipText("Salve as alterações após editar os dados");
        bntSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntSalvarActionPerformed(evt);
            }
        });

        bntPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/feature_search_outline_icon_139039 (1).png"))); // NOI18N
        bntPesquisar.setText("Pesquisar");
        bntPesquisar.setToolTipText("Pesquise pelo nome da conta");
        bntPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntPesquisarActionPerformed(evt);
            }
        });

        lblTipo.setText("Tipo");

        cmbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Receita", "Despesa" }));
        cmbTipo.setToolTipText("Selecione o tipo da conta");
        cmbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoActionPerformed(evt);
            }
        });

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1485477024-menu_78574.png"))); // NOI18N
        jMenu2.setText("Menu");
        jMenu2.setToolTipText("Navegue pelo menus para acessar as opções");

        jmPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/3643769-building-home-house-main-menu-start_113416 (1).png"))); // NOI18N
        jmPrincipal.setText("Tela principal");
        jmPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmPrincipalActionPerformed(evt);
            }
        });
        jMenu2.add(jmPrincipal);

        jmHistorico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/historical_3107.png"))); // NOI18N
        jmHistorico.setText("Historico");
        jmHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmHistoricoActionPerformed(evt);
            }
        });
        jMenu2.add(jmHistorico);

        jmGraficos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/graph_progress_chart_charts_analytics_bars_icon_124175.png"))); // NOI18N
        jmGraficos.setText("Graficos");
        jmGraficos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmGraficosActionPerformed(evt);
            }
        });
        jMenu2.add(jmGraficos);

        jmCategorias.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/category_icon_176162.png"))); // NOI18N
        jmCategorias.setText("Categorias");
        jmCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCategoriasActionPerformed(evt);
            }
        });
        jMenu2.add(jmCategorias);

        jmSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/4115235-exit-logout-sign-out_114030.png"))); // NOI18N
        jmSair.setText("Sair");
        jmSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSairActionPerformed(evt);
            }
        });
        jMenu2.add(jmSair);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(801, 801, 801)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE))
                    .addComponent(jSeparator5)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(bntCriar)
                        .addGap(57, 57, 57)
                        .addComponent(bntEditar)
                        .addGap(63, 63, 63)
                        .addComponent(bntExcluir)
                        .addGap(51, 51, 51)
                        .addComponent(bntSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(bntPesquisar)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jSeparator6))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblConta, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblData, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConta, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSaldo)
                                .addGap(246, 246, 246)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConta)
                    .addComponent(txtConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSaldo)
                    .addComponent(txtSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblData)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipo)
                    .addComponent(cmbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bntExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bntEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bntCriar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bntSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bntPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntCriarActionPerformed
      // Obter os valores dos campos
    String conta = txtConta.getText();
    String tipo = cmbTipo.getSelectedItem().toString();
    String saldo = txtSaldo.getText();
    String data = txtData.getText();  // Obter a data inserida no campo

    // Verificar se o campo conta está vazio
    if (conta.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, insira uma conta.");
        return;
    }

    // Verificar se a data está no formato correto
    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");
    sdf.setLenient(false); // Impede datas inválidas, como 31/02/2025
    try {
        // Tenta converter a data
        sdf.parse(data);
    } catch (java.text.ParseException e) {
        // Se ocorrer um erro, significa que a data está no formato errado
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, insira a data no formato dd/MM/yyyy.");
        return;
    }

    // Verificar se o tipo de conta é "receita" ou "despesa"
    if (tipo.equalsIgnoreCase("receita")) {
        // Verificar se a origem de receita já existe
        if (contaAtual != null && contaAtual.getOrigemRendas() != null) {
            for (OrigemRenda origem : contaAtual.getOrigemRendas()) {
                for (Carteira carteira : contaAtual.getCarteiras()) {
                    if (carteira.getNome().equalsIgnoreCase(conta)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "A conta de receita já existe.", "Aviso", javax.swing.JOptionPane.WARNING_MESSAGE);
                    return;
                }
              
                }
            }
        }

        // Criar e adicionar a nova origem de renda
        OrigemRenda novaOrigemRenda = new OrigemRenda(conta);
        if (novaOrigemRenda != null) {
            contaAtual.getOrigemRendas().add(novaOrigemRenda);
            // Inserir na tabela
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
            model.insertRow(0, new Object[]{conta, saldo, data, tipo});
            // Limpar os campos
            txtConta.setText("");
            txtSaldo.setText("");
            cmbTipo.setSelectedIndex(0);
            txtData.setText("");
            // Mensagem de sucesso
            javax.swing.JOptionPane.showMessageDialog(this, "Origem de renda adicionada com sucesso!");
        }

    } else if (tipo.equalsIgnoreCase("despesa")) {
        // Verificar se a conta de despesa já existe usando o método da classe Usuario
        if (contaAtual != null && contaAtual.getCarteiras() != null) {
            for (Carteira carteira : contaAtual.getCarteiras()) {
                if (carteira.getNome().equalsIgnoreCase(conta)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "A conta de despesa já existe.", "Aviso", javax.swing.JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }

        // Criar a nova conta de despesa utilizando o método criarCarteira da classe Usuario
        contaAtual.criarCarteira(conta, Integer.parseInt(saldo)); // Passa o nome da conta e o saldo inicial
        // Inserir na tabela
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        model.insertRow(0, new Object[]{conta, saldo, data, tipo});
        // Limpar os campos
        txtConta.setText("");
        txtSaldo.setText("");
        cmbTipo.setSelectedIndex(0);
        txtData.setText("");
        // Mensagem de sucesso
        javax.swing.JOptionPane.showMessageDialog(this, "Conta de despesa adicionada com sucesso!");

    } else {
        // Se o tipo não for nem "receita" nem "despesa", exibe um erro
        javax.swing.JOptionPane.showMessageDialog(this, "Tipo inválido. Por favor, selecione entre 'despesa' ou 'receita'.", "Erro", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_bntCriarActionPerformed

    private void bntExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExcluirActionPerformed
       // Verificar se uma linha foi selecionada na tabela
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow != -1) {
        // Obter o modelo da tabela
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();

        // Obter o nome da conta da primeira coluna da linha selecionada
        String nomeConta = (String) model.getValueAt(selectedRow, 0);

        // Remover a linha da tabela
        model.removeRow(selectedRow);

        // Verificar se o tipo de conta é "receita"
        String tipoConta = (String) model.getValueAt(selectedRow, 3); // A coluna 3 tem o tipo (receita ou despesa)

        if (tipoConta.equalsIgnoreCase("receita")) {
            // Remover a origem de renda da lista de origemRendas
            if (contaAtual != null && contaAtual.getOrigemRendas() != null) {
                for (OrigemRenda origemRenda : contaAtual.getOrigemRendas()) {
                    if (origemRenda.getNomeOrigemRenda().equalsIgnoreCase(nomeConta)) {
                        contaAtual.getOrigemRendas().remove(origemRenda);
                        break; // Interromper o loop após remover a origem de renda
                    }
                }
            }
            javax.swing.JOptionPane.showMessageDialog(this, "Origem de renda excluída com sucesso!");
        } else if (tipoConta.equalsIgnoreCase("despesa")) {
            // Remover a conta de despesa da lista de carteiras
            if (contaAtual != null && contaAtual.getCarteiras() != null) {
                for (Carteira carteira : contaAtual.getCarteiras()) {
                    if (carteira.getNome().equalsIgnoreCase(nomeConta)) {
                        contaAtual.getCarteiras().remove(carteira);
                        break; // Interromper o loop após remover a carteira
                    }
                }
            }
            javax.swing.JOptionPane.showMessageDialog(this, "Conta de despesa excluída com sucesso!");
        }
    } else {
        // Caso não tenha linha selecionada
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, selecione uma conta para excluir.");
    }
    }//GEN-LAST:event_bntExcluirActionPerformed

    private void jmCategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCategoriasActionPerformed
        // Abrir a tela de categorias
        controleTelas.getTelaCategoria().setVisible(true);
        this.dispose(); // Fecha a tela atual
    }//GEN-LAST:event_jmCategoriasActionPerformed

    private void jmPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmPrincipalActionPerformed
        // Abrir a tela principal
        controleTelas.getTelaPrincipal().setVisible(true);
        this.dispose(); // Fecha a tela atual
    }//GEN-LAST:event_jmPrincipalActionPerformed

    private void jmHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmHistoricoActionPerformed
        // Abrir a tela de histórico
        controleTelas.getTelaHistorico().setVisible(true);
        this.dispose(); // Fecha a tela atual
    }//GEN-LAST:event_jmHistoricoActionPerformed

    private void jmGraficosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmGraficosActionPerformed
        // Abrir a tela de gráficos
        controleTelas.getTelaGrafico().setVisible(true);
        this.dispose(); // Fecha a tela atual
    }//GEN-LAST:event_jmGraficosActionPerformed

    private void jmSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSairActionPerformed
        // Voltar para a tela principal ao clicar em "Sair"
        contaUsuarios.sairConta();
        controleTelas.getTelaLogin().setVisible(true);
        dispose();
    }//GEN-LAST:event_jmSairActionPerformed

    private void bntEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntEditarActionPerformed
        int selectedRow = jTable1.getSelectedRow();  // Obtém a linha selecionada na tabela.

        if (selectedRow != -1) {  // Verifica se há uma linha selecionada.
            txtConta.setText(jTable1.getValueAt(selectedRow, 0).toString());  // Preenche o campo de conta.
            txtSaldo.setText(jTable1.getValueAt(selectedRow, 1).toString());  // Preenche o campo de saldo.
            txtData.setText(jTable1.getValueAt(selectedRow, 2).toString());  // Preenche o campo de data.
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para editar.");  // Exibe erro se nenhuma linha for selecionada.
        }
    }//GEN-LAST:event_bntEditarActionPerformed

    private void bntSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntSalvarActionPerformed
       // Obtém a linha selecionada na tabela
    int linhaSelecionada = jTable1.getSelectedRow();

    if (linhaSelecionada != -1) {  // Verifica se uma linha foi selecionada
        String conta = txtConta.getText().trim();  // Obtém o valor do campo "Conta"
        String saldo = txtSaldo.getText().trim();  // Obtém o valor do campo "Saldo"
        String data = txtData.getText().trim();  // Obtém o valor do campo "Data"

        // Verificar se os campos não estão vazios
        if (!conta.isEmpty() && !saldo.isEmpty() && !data.isEmpty()) {
            // Obter o modelo da tabela
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            // Obter o tipo da conta (receita ou despesa) da tabela (supondo que esteja na coluna 3)
            String tipoConta = (String) model.getValueAt(linhaSelecionada, 3);  // Ajuste o índice da coluna conforme necessário

            // Obter a instância do usuário atual
            Usuario contaAtual = ContasUsuarios.getInstance().conta();

            boolean atualizado = false;  // Flag para verificar se a atualização foi realizada

            // Lógica para "Receita" (Origem de Renda)
            if (tipoConta.equalsIgnoreCase("receita")) {
                // Percorrer as origens de renda e tentar encontrar a origem de renda com o nome atual da linha da tabela
                for (OrigemRenda origem : contaAtual.getOrigemRendas()) {
                    // Comparando o nome da origem de renda selecionada com o nome na lista de origem de rendas
                    if (origem.getNomeOrigemRenda().equalsIgnoreCase(jTable1.getValueAt(linhaSelecionada, 0).toString())) {
                        origem.setNomeOrigemRenda(conta);  // Atualiza o nome da origem de renda
                        atualizado = true;  // Marca como atualizado

                        // Atualiza a tabela
                        model.setValueAt(conta, linhaSelecionada, 0);  // Atualiza a coluna "Conta" (coluna 0)
                        model.setValueAt(saldo, linhaSelecionada, 1);  // Atualiza a coluna "Saldo" (coluna 1)
                        model.setValueAt(data, linhaSelecionada, 2);   // Atualiza a coluna "Data" (coluna 2)
                        break;
                    }
                }
            }

            // Lógica para "Despesa" (Carteira)
            else if (tipoConta.equalsIgnoreCase("despesa")) {
                // Percorrer as carteiras e tentar encontrar a conta de despesa com o nome atual da linha da tabela
                for (Carteira carteira : contaAtual.getCarteiras()) {
                    // Comparando o nome da carteira selecionada com o nome na lista de carteiras
                    if (carteira.getNome().equalsIgnoreCase(jTable1.getValueAt(linhaSelecionada, 0).toString())) {
                        carteira.setNome(conta);  // Atualiza o nome da conta de despesa
                        carteira.setSaldo((int) Double.parseDouble(saldo));  // Atualiza o saldo da conta
                        atualizado = true;  // Marca como atualizado

                        // Atualiza a tabela
                        model.setValueAt(conta, linhaSelecionada, 0);  // Atualiza a coluna "Conta" (coluna 0)
                        model.setValueAt(saldo, linhaSelecionada, 1);  // Atualiza a coluna "Saldo" (coluna 1)
                        model.setValueAt(data, linhaSelecionada, 2);   // Atualiza a coluna "Data" (coluna 2)
                        break;
                    }
                }
            }

            // Se os dados foram atualizados, exibe a mensagem de sucesso
            if (atualizado) {
                JOptionPane.showMessageDialog(this, "Dados atualizados com sucesso!");
            } else {
                // Se não foi possível atualizar, exibe a mensagem de erro
                JOptionPane.showMessageDialog(this, "Conta não encontrada para edição.");
            }

            // Limpar os campos após salvar
            txtConta.setText("");
            txtSaldo.setText("");
            txtData.setText("");
        } else {
            // Caso algum campo esteja vazio, exibe a mensagem de erro
            JOptionPane.showMessageDialog(this, "Por favor, insira todos os dados para salvar.");
        }
        } else {
        // Caso nenhuma linha tenha sido selecionada
            JOptionPane.showMessageDialog(this, "Selecione uma linha para editar para poder salvar.");
    }//GEN-LAST:event_bntSalvarActionPerformed
    }
    private void bntPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntPesquisarActionPerformed
     // Obtém o texto digitado no campo de pesquisa 'txtConta'
    String contaPesquisada = txtConta.getText(); // O texto é mantido como foi digitado

    // Verifica se o campo de pesquisa não está vazio
    if (contaPesquisada.isEmpty()) {
        // Exibe uma mensagem informando ao usuário para inserir uma conta para pesquisar
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, insira o nome da conta para pesquisar.", "Aviso", javax.swing.JOptionPane.WARNING_MESSAGE);
        return; // Interrompe a execução do método, impedindo a pesquisa
    }

    // Obtém o modelo da tabela
    javax.swing.table.DefaultTableModel modeloTabela = (javax.swing.table.DefaultTableModel) jTable1.getModel();

    // Variável para verificar se encontrou algum registro
    boolean encontrou = false;

    // Percorre todas as linhas da tabela
    for (int i = 0; i < modeloTabela.getRowCount(); i++) {
        // Obtém o nome da conta na tabela (ajustar o índice da coluna conforme necessário)
        String nomeContaTabela = modeloTabela.getValueAt(i, 0).toString().trim(); // Supondo que o nome da conta está na 1ª coluna (índice 0)

        // Verifica se o nome da conta na tabela corresponde à pesquisa
        if (nomeContaTabela.equalsIgnoreCase(contaPesquisada)) {
            // Seleciona a linha correspondente
            jTable1.setRowSelectionInterval(i, i);
            encontrou = true;
            break; // Encerra o loop assim que encontrar a correspondência
        }
    }

    // Se não encontrar nenhum registro, mostrar uma mensagem
    if (!encontrou) {
        javax.swing.JOptionPane.showMessageDialog(this, "Nenhuma conta encontrada com esse nome.");
    } 
    // Limpa os campos de texto após a pesquisa
    txtConta.setText("");
    txtSaldo.setText("");
    txtData.setText("");
    }//GEN-LAST:event_bntPesquisarActionPerformed

    private void txtDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataActionPerformed

    private void cmbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTipoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaContas1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaContas1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaContas1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaContas1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaContas1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntCriar;
    private javax.swing.JButton bntEditar;
    private javax.swing.JButton bntExcluir;
    private javax.swing.JButton bntPesquisar;
    private javax.swing.JButton bntSalvar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem jmCategorias;
    private javax.swing.JMenuItem jmGraficos;
    private javax.swing.JMenuItem jmHistorico;
    private javax.swing.JMenuItem jmPrincipal;
    private javax.swing.JMenuItem jmSair;
    private javax.swing.JLabel lblConta;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JTextField txtConta;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtSaldo;
    // End of variables declaration//GEN-END:variables
}
