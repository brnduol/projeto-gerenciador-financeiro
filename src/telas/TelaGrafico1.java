/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package telas;

import classesGerenciador.Categoria;
import classesGerenciador.ContasUsuarios;
import classesGerenciador.OrigemRenda;
import classesGerenciador.Transacao;
import classesGerenciador.Usuario;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import javax.swing.*;
import projeto.gerenciador.financeiro.ControleTelas;
/**
 *
 * @author Bruno Eduardo <https://github.com/brnduol>
 */
public class TelaGrafico1 extends javax.swing.JFrame {
    private ContasUsuarios contaUsuarios;
    private Usuario contaAtual;
    private ControleTelas controleTelas;
    
    /**
     * Creates new form TelaGrafico1
     */
    public TelaGrafico1() {
        contaUsuarios = ContasUsuarios.getInstance();
        contaAtual = contaUsuarios.conta();
        controleTelas = ControleTelas.getInstance(); 
        initComponents();
        
        this.setLocationRelativeTo(null);
        setSize(1000, 800);  
        jPanel1.setLayout(new java.awt.BorderLayout()); 
        
        carregarMesGrafico();
        carregarAnoGrafico();
        
    }
    
    
    public void carregarMesGrafico(){
            //Remover os itens da ComboBox
            cbMesGrafico.removeAllItems();

            cbMesGrafico.addItem("Selecione um mês");

            String[] meses = {"Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", 
                  "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"};

            // Adiciona os meses ao JComboBox
            for (String mes : meses) {
                cbMesGrafico.addItem(mes);

            }
        }
    
     public void carregarAnoGrafico(){
            //Remover os itens da ComboBox
            cbAnoGrafico.removeAllItems();

            cbAnoGrafico.addItem("Selecione um ano");

            String[] anos = {"2024", "2025"};

            // Adiciona os meses ao JComboBox
            for (String ano : anos) {
                cbAnoGrafico.addItem(ano);

            }
     }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMesGrafico = new javax.swing.JLabel();
        lblAnoGrafico = new javax.swing.JLabel();
        btnGerarGraficoOrigemRenda = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cbMesGrafico = new javax.swing.JComboBox<>();
        cbAnoGrafico = new javax.swing.JComboBox<>();
        btnGerarGraficoCategoria = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuGrafico = new javax.swing.JMenu();
        jmPrincipal = new javax.swing.JMenuItem();
        btContasGrafico = new javax.swing.JMenuItem();
        btHistoricoGrafico = new javax.swing.JMenuItem();
        btCategoriasGrafico = new javax.swing.JMenuItem();
        btSairGrafico = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblMesGrafico.setText("Mês");

        lblAnoGrafico.setText("Ano");

        btnGerarGraficoOrigemRenda.setText("Gerar gráfico Origem Renda ");
        btnGerarGraficoOrigemRenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarGraficoOrigemRendaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 530, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        cbMesGrafico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbAnoGrafico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnGerarGraficoCategoria.setText("Gerar gráfico por Categoria");
        btnGerarGraficoCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarGraficoCategoriaActionPerformed(evt);
            }
        });

        menuGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1485477024-menu_78574.png"))); // NOI18N
        menuGrafico.setText("Menu");

        jmPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/32officeicons-31_89708.png"))); // NOI18N
        jmPrincipal.setText("Tela principal");
        jmPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmPrincipalActionPerformed(evt);
            }
        });
        menuGrafico.add(jmPrincipal);

        btContasGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/shoppaymentorderbuy-23_icon-icons.com_73884.png"))); // NOI18N
        btContasGrafico.setText("Contas");
        btContasGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btContasGraficoActionPerformed(evt);
            }
        });
        menuGrafico.add(btContasGrafico);

        btHistoricoGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Historical_icon-icons.com_54175.png"))); // NOI18N
        btHistoricoGrafico.setText("Historico");
        btHistoricoGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHistoricoGraficoActionPerformed(evt);
            }
        });
        menuGrafico.add(btHistoricoGrafico);

        btCategoriasGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1486486297-attribute-category-label-shop-price-price-tag-tag_81213.png"))); // NOI18N
        btCategoriasGrafico.setText("Categorias");
        btCategoriasGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCategoriasGraficoActionPerformed(evt);
            }
        });
        menuGrafico.add(btCategoriasGrafico);

        btSairGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/logout256_24927.png"))); // NOI18N
        btSairGrafico.setText("Sair");
        btSairGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairGraficoActionPerformed(evt);
            }
        });
        menuGrafico.add(btSairGrafico);

        jMenuBar1.add(menuGrafico);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAnoGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cbMesGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbAnoGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(80, 80, 80)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnGerarGraficoOrigemRenda)
                                    .addComponent(btnGerarGraficoCategoria)))
                            .addComponent(lblMesGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(451, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMesGrafico)
                    .addComponent(cbMesGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGerarGraficoCategoria))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAnoGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAnoGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGerarGraficoOrigemRenda))
                .addGap(53, 53, 53)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
                        

    private void mostrarGrafico(DefaultPieDataset dataset) {
        // Criar o gráfico de pizza
        JFreeChart chart = ChartFactory.createPieChart(
            "Gráfico", // Título do gráfico
            dataset, // Dataset com os dados
            true, // Exibir legenda
            true, // Exibir tooltip
            false // Exibir URLs
        );

        System.out.println("Gráfico gerado"); // Print para controle

        // Adicionar o gráfico ao painel (jPanel1)
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(600, 400));

        // Limpar o painel antes de adicionar um novo gráfico
        jPanel1.removeAll();
        jPanel1.add(chartPanel, java.awt.BorderLayout.CENTER);
        jPanel1.revalidate();
        jPanel1.repaint();
    }

  
    
    private void btnGerarGraficoOrigemRendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarGraficoOrigemRendaActionPerformed
                                                

        // Obter os índices selecionados nos ComboBoxes
        int selectedAnoIndex = cbAnoGrafico.getSelectedIndex();
        int selectedMesIndex = cbMesGrafico.getSelectedIndex();

        // Validar se o usuário selecionou ano e mês
        if (selectedAnoIndex == 0 || selectedMesIndex == 0) {
            JOptionPane.showMessageDialog(null, "Todos os campos devem ser selecionados", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            return;
        }

        // Obter o ano e o mês selecionados
        int anoSelecionado = Integer.parseInt(cbAnoGrafico.getSelectedItem().toString());
        int mesSelecionado = selectedMesIndex; // O índice do JComboBox corresponde ao número do mês

        // Criar o dataset do gráfico
        DefaultPieDataset dataset = new DefaultPieDataset();

        // Iterar pelas origens de renda do usuário atual
        for (OrigemRenda origem : contaAtual.getOrigemRendas()) {
            double somaReceitas = 0;
            double somaDespesas = 0;

            // Iterar pelas transações para calcular os valores associados à origem
            for (Transacao transacao : contaAtual.getTransacoes()) {
                int anoTransacao = transacao.getData().getYear();
                int mesTransacao = transacao.getData().getMonthValue();

                // Verificar se a transação corresponde ao mês, ano e origem selecionados
                if (anoTransacao == anoSelecionado && mesTransacao == mesSelecionado &&
                    transacao.pertenceOrigem(origem.getNomeOrigemRenda())) {

                    // Separar receitas e despesas
                    if (transacao.getValor() > 0) {
                        somaReceitas += transacao.getValor();
                    } else {
                        somaDespesas += Math.abs(transacao.getValor());
                    }
                }
            }

            // Adicionar receitas e despesas ao dataset
            if (somaReceitas > 0) {
                dataset.setValue(origem.getNomeOrigemRenda() + " (Receitas)", somaReceitas);
            }
            if (somaDespesas > 0) {
                dataset.setValue(origem.getNomeOrigemRenda() + " (Despesas)", somaDespesas);
            }
        }

        // Verificar se há dados no dataset antes de gerar o gráfico
        if (dataset.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "Não há transações para o período selecionado.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            
        }
        
        else {
            mostrarGrafico(dataset);
        }

        


     
    }//GEN-LAST:event_btnGerarGraficoOrigemRendaActionPerformed

    private void btContasGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btContasGraficoActionPerformed
        // Abrir a tela principal
        controleTelas.getTelaContas().setVisible(true);
        this.dispose(); // Fecha a tela atual
        
        
    }//GEN-LAST:event_btContasGraficoActionPerformed

    private void btHistoricoGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHistoricoGraficoActionPerformed
        // Abrir a tela de histórico
        controleTelas.getTelaHistorico().setVisible(true);
        this.dispose(); // Fecha a tela atual
    }//GEN-LAST:event_btHistoricoGraficoActionPerformed

    private void btCategoriasGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCategoriasGraficoActionPerformed
        controleTelas.getTelaCategoria().setVisible(true);
        dispose();
    }//GEN-LAST:event_btCategoriasGraficoActionPerformed

    private void btSairGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairGraficoActionPerformed
        contaUsuarios.sairConta();
        controleTelas.getTelaLogin().setVisible(true);
        dispose();
    }//GEN-LAST:event_btSairGraficoActionPerformed

    private void jmPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmPrincipalActionPerformed
        // Abrir a tela principal
        controleTelas.getTelaPrincipal().setVisible(true);
        this.dispose(); // Fecha a tela atual
    }//GEN-LAST:event_jmPrincipalActionPerformed

    private void btnGerarGraficoCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarGraficoCategoriaActionPerformed
                                                  

        // Obter os índices selecionados nos ComboBoxes
        int selectedAnoIndex = cbAnoGrafico.getSelectedIndex();
        int selectedMesIndex = cbMesGrafico.getSelectedIndex();

        // Validar se o usuário selecionou ano e mês
        if (selectedAnoIndex == 0 || selectedMesIndex == 0) {
            JOptionPane.showMessageDialog(null, "Todos os campos devem ser selecionados", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            return;
        }

        // Obter o ano e o mês selecionados
        int anoSelecionado = Integer.parseInt(cbAnoGrafico.getSelectedItem().toString());
        int mesSelecionado = selectedMesIndex; // O índice do JComboBox corresponde ao número do mês

        // Criar o dataset do gráfico
        DefaultPieDataset dataset = new DefaultPieDataset();

        // Iterar pelas categorias de transações
        for (Categoria categoria : contaAtual.getCategorias()) {
            double somaTransacoes = 0;

            // Iterar pelas transações para somar os valores que pertencem à categoria atual
            for (Transacao transacao : contaAtual.getTransacoes()) {
                int anoTransacao = transacao.getData().getYear();
                int mesTransacao = transacao.getData().getMonthValue();

                // Verificar se a transação corresponde ao mês, ano e categoria selecionados
                if (anoTransacao == anoSelecionado && mesTransacao == mesSelecionado &&
                    transacao.pertenceCategoria(categoria.getNomeCategoria())) {
                    somaTransacoes += transacao.getValor();
                }
            }

            // Adicionar ao dataset se houver transações nessa categoria
            if (somaTransacoes != 0) {
                dataset.setValue(categoria.getNomeCategoria(), somaTransacoes);
            }
        }

        // Verificar se há dados no dataset antes de gerar o gráfico
        if (dataset.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "Não há transações para o período selecionado.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            
        }
        else {
            mostrarGrafico(dataset);
        }
        




    }//GEN-LAST:event_btnGerarGraficoCategoriaActionPerformed

                    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaGrafico1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaGrafico1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaGrafico1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaGrafico1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()  {
            public void run() {
                new TelaGrafico1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btCategoriasGrafico;
    private javax.swing.JMenuItem btContasGrafico;
    private javax.swing.JMenuItem btHistoricoGrafico;
    private javax.swing.JMenuItem btSairGrafico;
    private javax.swing.JButton btnGerarGraficoCategoria;
    private javax.swing.JButton btnGerarGraficoOrigemRenda;
    private javax.swing.JComboBox<String> cbAnoGrafico;
    private javax.swing.JComboBox<String> cbMesGrafico;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem jmPrincipal;
    private javax.swing.JLabel lblAnoGrafico;
    private javax.swing.JLabel lblMesGrafico;
    private javax.swing.JMenu menuGrafico;
    // End of variables declaration//GEN-END:variables
}
