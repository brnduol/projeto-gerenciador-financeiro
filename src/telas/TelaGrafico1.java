/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package telas;

import classesGerenciador.Categoria;
import classesGerenciador.ContasUsuarios;
import classesGerenciador.OrigemRenda;
import classesGerenciador.Transacao;
import classesGerenciador.Usuario;
import java.awt.Color;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import javax.swing.*;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.PieDataset;
import projeto.gerenciador.financeiro.ControleTelas;
/**
 *
 * @author Bruno Eduardo <https://github.com/brnduol>
 */
public class TelaGrafico1 extends javax.swing.JFrame {
    private ContasUsuarios contaUsuarios;
    private Usuario contaAtual;
    private ControleTelas controleTelas;
    
    /**
     * Creates new form TelaGrafico1
     */
    public TelaGrafico1() {
        contaUsuarios = ContasUsuarios.getInstance();
        contaAtual = contaUsuarios.conta();
        controleTelas = ControleTelas.getInstance(); 
        initComponents();
        
        this.setLocationRelativeTo(null);
        setSize(1000, 800);  
        jPanel1.setLayout(new java.awt.BorderLayout()); 
        
        carregarMesGrafico();
        carregarAnoGrafico();
        carregarCategoriaOrigemRenda();
        
    }
    
    
    public void carregarMesGrafico(){
            //Remover os itens da ComboBox
            cbMesGrafico.removeAllItems();

            cbMesGrafico.addItem("Selecione um mês");

            String[] meses = {"Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", 
                  "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"};

            // Adiciona os meses ao JComboBox
            for (String mes : meses) {
                cbMesGrafico.addItem(mes);

            }
        }
    
     public void carregarAnoGrafico(){
            //Remover os itens da ComboBox
            cbAnoGrafico.removeAllItems();

            cbAnoGrafico.addItem("Selecione um ano");
            

            String[] anos = {"2024", "2025"};

            // Adiciona os meses ao JComboBox
            for (String ano : anos) {
                cbAnoGrafico.addItem(ano);

            }
     }
     
     public void carregarCategoriaOrigemRenda(){
         //Remover os itens da ComboBox
         cbCategoriaOrigemRenda.removeAllItems();

         cbCategoriaOrigemRenda.addItem("Tipo");
         
         String[] tipos = {"Categoria", "Receitas/Despesas"};
         
         for (String tipo : tipos) {
             cbCategoriaOrigemRenda.addItem(tipo);
         }
     }
    
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAtualizar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cbMesGrafico = new javax.swing.JComboBox<>();
        cbAnoGrafico = new javax.swing.JComboBox<>();
        cbCategoriaOrigemRenda = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuGrafico = new javax.swing.JMenu();
        jmPrincipal = new javax.swing.JMenuItem();
        btContasGrafico = new javax.swing.JMenuItem();
        btHistoricoGrafico = new javax.swing.JMenuItem();
        btCategoriasGrafico = new javax.swing.JMenuItem();
        btSairGrafico = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 746, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 491, Short.MAX_VALUE)
        );

        cbMesGrafico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbAnoGrafico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbCategoriaOrigemRenda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCategoriaOrigemRenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoriaOrigemRendaActionPerformed(evt);
            }
        });

        menuGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1485477024-menu_78574.png"))); // NOI18N
        menuGrafico.setText("Menu");

        jmPrincipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/32officeicons-31_89708.png"))); // NOI18N
        jmPrincipal.setText("Tela principal");
        jmPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmPrincipalActionPerformed(evt);
            }
        });
        menuGrafico.add(jmPrincipal);

        btContasGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/shoppaymentorderbuy-23_icon-icons.com_73884.png"))); // NOI18N
        btContasGrafico.setText("Contas");
        btContasGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btContasGraficoActionPerformed(evt);
            }
        });
        menuGrafico.add(btContasGrafico);

        btHistoricoGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Historical_icon-icons.com_54175.png"))); // NOI18N
        btHistoricoGrafico.setText("Historico");
        btHistoricoGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHistoricoGraficoActionPerformed(evt);
            }
        });
        menuGrafico.add(btHistoricoGrafico);

        btCategoriasGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1486486297-attribute-category-label-shop-price-price-tag-tag_81213.png"))); // NOI18N
        btCategoriasGrafico.setText("Categorias");
        btCategoriasGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCategoriasGraficoActionPerformed(evt);
            }
        });
        menuGrafico.add(btCategoriasGrafico);

        btSairGrafico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/logout256_24927.png"))); // NOI18N
        btSairGrafico.setText("Sair");
        btSairGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairGraficoActionPerformed(evt);
            }
        });
        menuGrafico.add(btSairGrafico);

        jMenuBar1.add(menuGrafico);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbMesGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(cbAnoGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(cbCategoriaOrigemRenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(btnAtualizar))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(298, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMesGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbAnoGrafico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCategoriaOrigemRenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtualizar))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
                        
    private void mostrarGrafico(DefaultPieDataset dataset) {
        // Criar o gráfico de pizza
        JFreeChart chart = ChartFactory.createPieChart(
            "Gráfico", // Título do gráfico
            dataset, // Dataset com os dados
            true, // Exibir legenda
            true, // Exibir tooltip
            false // Exibir URLs
        );

        // Customizar o gráfico de pizza
        PiePlot plot = (PiePlot) chart.getPlot();

        // Customização do label generator para mostrar o valor negativo na legenda
        plot.setLabelGenerator(new StandardPieSectionLabelGenerator() {
            @Override
            public String generateSectionLabel(PieDataset dataset, Comparable key) {
                // Pega o valor da transação associada à categoria
                double valor = dataset.getValue(key).intValue();

                // Verifica se o valor é negativo
                if (valor < 0) {
                    // Exibe o valor como positivo com uma descrição indicando despesa
                    return key + ": " + valor + " (Despesa de -" + valor + ")";
                } else {
                    return key + ": " + valor;
                }
            }
        });

        // Adicionar o gráfico ao painel (jPanel1)
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(710, 450));

        // Limpar o painel antes de adicionar um novo gráfico
        jPanel1.removeAll();
        jPanel1.add(chartPanel, java.awt.BorderLayout.CENTER);
        jPanel1.revalidate();
        jPanel1.repaint();
    }


    
    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
                                                                                                          
        // Obter os índices selecionados nos ComboBoxes
        int selectedAnoIndex = cbAnoGrafico.getSelectedIndex();
        int selectedMesIndex = cbMesGrafico.getSelectedIndex();
        String selectedCategoriaOrigemRenda = (String) cbCategoriaOrigemRenda.getSelectedItem();
        
        // Validar se o usuário selecionou ano e mês
        if (selectedAnoIndex == 0 || selectedMesIndex == 0 || selectedCategoriaOrigemRenda.equals("")) {
            JOptionPane.showMessageDialog(null, "Todos os campos devem ser selecionados", "Mensagem", JOptionPane.PLAIN_MESSAGE);
            return;
        }
        
         // Obter o ano e o mês selecionados
        int anoSelecionado = Integer.parseInt(cbAnoGrafico.getSelectedItem().toString());
        int mesSelecionado = selectedMesIndex; // O índice do JComboBox corresponde ao número do mês

        
        // Criar o dataset do gráfico
        DefaultPieDataset dataset = new DefaultPieDataset();
        
        if (selectedCategoriaOrigemRenda.equals("Categoria")){
            // Iterar pelas categorias de despesas (Categoria)
            for (Categoria categoria : contaAtual.getCategorias()) {
                double somaTransacoes = 0;

                // Iterar pelas transações da categoria para somar os valores que pertencem ao mês e ano selecionados
                for (Transacao transacao : categoria.getTransacoes()) {
                    int anoTransacao = transacao.getData().getYear();
                    int mesTransacao = transacao.getData().getMonthValue();

                    // Verificar se a transação corresponde ao mês e ano selecionados
                    if (anoTransacao == anoSelecionado && mesTransacao == mesSelecionado) {
                        somaTransacoes += transacao.getValor();
                    }
                }

                // Verifica se há transações para a categoria de despesa e adiciona ao dataset
                if (somaTransacoes != 0) {
                    dataset.setValue("Despesa - " + categoria.getNomeCategoria(), Math.abs(somaTransacoes));
                    System.out.println("Despesa - Categoria: " + categoria.getNomeCategoria() + " | Soma Transações: " + somaTransacoes);
                }
            }

            // Iterar pelas categorias de receitas (OrigemRenda)
            for (OrigemRenda origemRenda : contaAtual.getOrigemRendas()) {
                double somaTransacoes = 0;

                // Iterar pelas transações de origem de renda para somar os valores que pertencem ao mês e ano selecionados
                for (Transacao transacao : origemRenda.getTransacoes()) {
                    int anoTransacao = transacao.getData().getYear();
                    int mesTransacao = transacao.getData().getMonthValue();

                    // Verificar se a transação corresponde ao mês e ano selecionados
                    if (anoTransacao == anoSelecionado && mesTransacao == mesSelecionado) {
                        somaTransacoes += transacao.getValor();
                    }
                }

                // Verifica se há transações para a origem de receita e adiciona ao dataset
                if (somaTransacoes != 0) {
                    dataset.setValue("Receita - " + origemRenda.getNomeOrigemRenda(), somaTransacoes);
                    System.out.println("Receita - Origem: " + origemRenda.getNomeOrigemRenda() + " | Soma Transações: " + somaTransacoes);
                }
            }

        }
        
        if (selectedCategoriaOrigemRenda.equals("Receitas/Despesas")){ 
           double totalReceitas = 0;
           double totalDespesas = 0;

            // Iterar pelas transações do usuário atual
            for (Transacao transacao : contaAtual.getTransacoes()) {
                int anoTransacao = transacao.getData().getYear();
                int mesTransacao = transacao.getData().getMonthValue();

                // Verificar se a transação corresponde ao mês e ano selecionados
                if (anoTransacao == anoSelecionado && mesTransacao == mesSelecionado) {
                    double valor = transacao.getValor();

                    if (valor > 0) {
                        totalReceitas += valor;
                    } else {
                        totalDespesas += Math.abs(valor);
                    }
                }
            }

            // Arredondar os valores para inteiros antes de adicioná-los ao dataset
            int receitasInteiras = (int) Math.round(totalReceitas);
            int despesasInteiras = (int) Math.round(totalDespesas);

            // Adicionar receitas e despesas ao dataset
            if (receitasInteiras > 0) {
                dataset.setValue("Receitas", receitasInteiras);
            }
            if (despesasInteiras > 0) {
                dataset.setValue("Despesas", despesasInteiras);
            }
            
        }
        

        // Verificar se há dados no dataset antes de gerar o gráfico
        if (dataset.getItemCount() == 0) {
            JOptionPane.showMessageDialog(null, "Não há transações para o período selecionado.", "Mensagem", JOptionPane.PLAIN_MESSAGE);
        } else {
            mostrarGrafico(dataset);
        }


     
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btContasGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btContasGraficoActionPerformed
        // Abrir a tela principal
        controleTelas.getTelaContas().setVisible(true);
        this.dispose(); // Fecha a tela atual
        
        
    }//GEN-LAST:event_btContasGraficoActionPerformed

    private void btHistoricoGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHistoricoGraficoActionPerformed
        // Abrir a tela de histórico
        controleTelas.getTelaHistorico().setVisible(true);
        this.dispose(); // Fecha a tela atual
    }//GEN-LAST:event_btHistoricoGraficoActionPerformed

    private void btCategoriasGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCategoriasGraficoActionPerformed
        controleTelas.getTelaCategoria().setVisible(true);
        dispose();
    }//GEN-LAST:event_btCategoriasGraficoActionPerformed

    private void btSairGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairGraficoActionPerformed
        contaUsuarios.sairConta();
        controleTelas.getTelaLogin().setVisible(true);
        dispose();
    }//GEN-LAST:event_btSairGraficoActionPerformed

    private void jmPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmPrincipalActionPerformed
        // Abrir a tela principal
        controleTelas.getTelaPrincipal().setVisible(true);
        this.dispose(); // Fecha a tela atual
    }//GEN-LAST:event_jmPrincipalActionPerformed

    private void cbCategoriaOrigemRendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoriaOrigemRendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCategoriaOrigemRendaActionPerformed

                    

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaGrafico1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaGrafico1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaGrafico1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaGrafico1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()  {
            public void run() {
                new TelaGrafico1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btCategoriasGrafico;
    private javax.swing.JMenuItem btContasGrafico;
    private javax.swing.JMenuItem btHistoricoGrafico;
    private javax.swing.JMenuItem btSairGrafico;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JComboBox<String> cbAnoGrafico;
    private javax.swing.JComboBox<String> cbCategoriaOrigemRenda;
    private javax.swing.JComboBox<String> cbMesGrafico;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuItem jmPrincipal;
    private javax.swing.JMenu menuGrafico;
    // End of variables declaration//GEN-END:variables
}
